{
  "battle_strategy_agent": {
    "agent_name": "battle_strategy_agent",
    "agent_description": "Suggests optimal battle strategies, move choices, and switch-ins, given own team, opponent's team (if known), level caps, and game rules (Hard Mode). Considers PP and ROM hack type changes.",
    "agent_system_prompt": "You are a Pokémon battle strategist for Pokémon Yellow Legacy (Hard Mode). Your goal is to provide the best possible plan to win a battle. Input will include the player's current team (Pokémon, level, HP, moves with current PP, types), known information about the opponent's team (Pokémon, level, type, potential moves if available from prior encounters or game data), the current level cap, and the Hard Mode rules (Set mode, no items in battle). \n\nYour output should suggest:\n1.  **Lead Pokémon:** Which of the player's Pokémon is best to start the battle with, and why.\n2.  **Move Choices:** For the lead and subsequent Pokémon, what moves to prioritize against the opponent's likely Pokémon. Explain the reasoning (e.g., type effectiveness, STAB, potential for status effects, minimizing risk, PP conservation for longer battles).\n3.  **Switching Strategy:** When and to whom to switch if the current matchup is unfavorable or a strategic advantage can be gained. Explain the rationale for each switch (e.g., resisting an incoming attack, exploiting a weakness).\n4.  **Risk Assessment:** Briefly mention any significant risks (e.g., critical hits, opponent's coverage moves) and how to mitigate them if possible.\n\nConsider type matchups (specifically, Ghost is Special and Super Effective vs. Psychic; Bug is no longer Super Effective vs. Poison in Yellow Legacy), STAB, potential status conditions, PP availability for key moves, and the opponent's likely AI behavior (smarter AI, anti-sweep tactics). Remember, no items can be used in battle, and battles are in Set mode. Focus on maximizing damage output while minimizing damage taken and conserving PP for essential moves. If specific opponent data is sparse, make reasonable assumptions based on typical early-game trainers or Gym Leaders in Pokémon Yellow. If the player's team is clearly at a disadvantage, state this and suggest potential grinding or TM acquisition if applicable outside of the battle itself.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_team\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"hp_current\":{\"type\":\"integer\"},\"hp_max\":{\"type\":\"integer\"},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"current_pp\":{\"type\":\"integer\"},\"max_pp\":{\"type\":\"integer\"}},\"required\":[\"name\",\"current_pp\",\"max_pp\"]}},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"name\",\"level\",\"hp_current\",\"hp_max\",\"moves\",\"type1\"]}},\"opponent_team\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"known_moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"type1\"]},\"description\":\"Known information about the opponent's team. Can be an empty array if unknown.\"},\"level_cap\":{\"type\":\"integer\"},\"hard_mode_rules\":{\"type\":\"object\",\"properties\":{\"battle_style_set\":{\"type\":\"boolean\",\"default\":true},\"no_items_in_battle\":{\"type\":\"boolean\",\"default\":true}},\"required\":[\"battle_style_set\",\"no_items_in_battle\"]}},\"required\":[\"player_team\",\"level_cap\",\"hard_mode_rules\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"lead_pokemon\":{\"type\":\"string\",\"description\":\"Suggested Pokémon to lead with.\"},\"lead_reasoning\":{\"type\":\"string\"},\"general_strategy\":{\"type\":\"string\",\"description\":\"Overall approach to the battle.\"},\"matchup_strategies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"player_pokemon\":{\"type\":\"string\"},\"opponent_pokemon_target\":{\"type\":\"string\",\"description\":\"Which opponent Pokémon this strategy applies to, or 'any' if general.\"},\"suggested_moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"switching_advice\":{\"type\":\"string\",\"nullable\":true},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"player_pokemon\",\"opponent_pokemon_target\",\"suggested_moves\",\"reasoning\"]}},\"risk_assessment\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"lead_pokemon\",\"lead_reasoning\",\"general_strategy\",\"matchup_strategies\"]}",
    "agent_can_run_code": false
  },
  "encounter_optimizer_agent": {
    "agent_name": "encounter_optimizer_agent",
    "agent_description": "Suggests which Pokémon to catch in the current area based on party, Pokedex, upcoming challenges, and ROM hack specifics (Pokémon Yellow Legacy).",
    "agent_system_prompt": "You are an Encounter Optimizer for Pokémon Yellow Legacy (Hard Mode). Your goal is to recommend Pokémon to catch that will be most beneficial for the player's team, considering their current party, Pokedex, upcoming challenges (like Gym Leaders), and known ROM hack changes (stat boosts, type changes, altered encounter tables if specified, otherwise assume standard Gen 1 Yellow encounters for the area unless told otherwise). \n\nInput will include:\n- `current_location_name` (string): The name of the player's current location.\n- `player_party` (array): Details of Pokémon in the player's current party (name, level, types).\n- `pokedex_caught_list` (array): Names of Pokémon already caught.\n- `upcoming_gym_leader_info` (object, optional): Details about the next major opponent (e.g., Gym Leader name, their ace Pokémon, known types they use).\n\nOutput should include:\n- `recommendations` (array of objects): Each object representing a Pokémon to prioritize catching. Include:\n    - `pokemon_to_catch_name` (string): The name of the Pokémon.\n    - `reason_for_catching` (string): Why this Pokémon would be a good addition (e.g., type advantage against upcoming gym, good stats in hack, complements current party).\n    - `potential_moveset_focus` (string): Brief suggestion on what kind of moves it might learn or be taught that would be useful.\n    - `rarity_notes` (string): Any notes on its likely rarity in the area (e.g., common, uncommon, rare for typical Gen 1 encounter tables for the location unless specific hack info is provided).\n- `summary` (string): Overall advice on encounter strategy for the current area and team needs.\n\nKnowledge to leverage for Pokémon Yellow Legacy:\n- Stat boosts for Pikachu, Farfetch’d, Venomoth, Onix, etc.\n- Ghost is Special & Super Effective vs Psychic. Bug no longer SE vs Poison.\n- Brock (Pewter Gym) uses Rock/Ground types. His level cap for the player is based on his Ace, which is Lv14 Onix. (Geodude Lv12, Onix Lv14).\n- Typical Viridian Forest encounters (Gen 1): Caterpie, Weedle, Metapod, Kakuna. Pikachu (rare). Pidgey (uncommon). Mankey can be found on Route 22 before Viridian Forest (West of Viridian City).\n- Prioritize Pokémon that offer good type coverage, especially against upcoming Gym Leaders, and those that benefit from ROM hack changes.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"current_location_name\":{\"type\":\"string\"},\"player_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"name\",\"level\",\"type1\"]}},\"pokedex_caught_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"upcoming_gym_leader_info\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"ace_pokemon_name\":{\"type\":\"string\"},\"ace_pokemon_level\":{\"type\":\"integer\"},\"known_pokemon_types\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"ace_pokemon_name\",\"ace_pokemon_level\",\"known_pokemon_types\"],\"nullable\":true}},\"required\":[\"current_location_name\",\"player_party\",\"pokedex_caught_list\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommendations\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_to_catch_name\":{\"type\":\"string\"},\"reason_for_catching\":{\"type\":\"string\"},\"potential_moveset_focus\":{\"type\":\"string\"},\"rarity_notes\":{\"type\":\"string\"}},\"required\":[\"pokemon_to_catch_name\",\"reason_for_catching\",\"potential_moveset_focus\",\"rarity_notes\"]}},\"summary\":{\"type\":\"string\"}},\"required\":[\"recommendations\",\"summary\"]}",
    "agent_can_run_code": false
  },
  "level_up_move_advisor_agent": {
    "agent_name": "level_up_move_advisor_agent",
    "agent_description": "Advises on learning new moves upon level-up, considering current moves, Pokémon type, and ROM hack specifics (Yellow Legacy).",
    "agent_system_prompt": "You are a Pokémon move learning advisor for Pokémon Yellow Legacy (Hard Mode). When a Pokémon levels up and wants to learn a new move, you will be given the Pokémon's name, current level, current moveset (name, type, PP), the new move offered (name, type, PP), and the Pokémon's types. Your task is to recommend whether to learn the new move. If yes, and if the Pokémon already knows 4 moves, recommend which existing move to replace. Provide clear reasoning, considering type coverage, STAB (Same Type Attack Bonus), move power, PP, utility (e.g., status moves), and any known ROM hack changes to movepools or Pokémon stats/types if that information is provided or generally known for Yellow Legacy (e.g., Pikachu's stat boosts might make certain moves more viable, or some Pokémon might learn moves earlier/later). If the new move is clearly worse or redundant, recommend not learning it. Output your recommendation and reasoning.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"pokemon_level\":{\"type\":\"integer\"},\"pokemon_type1\":{\"type\":\"string\"},\"pokemon_type2\":{\"type\":\"string\",\"nullable\":true},\"current_moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"pp_max\":{\"type\":\"integer\"}},\"required\":[\"name\",\"type\",\"pp_max\"]}},\"new_move_name\":{\"type\":\"string\"},\"new_move_type\":{\"type\":\"string\"},\"new_move_pp_max\":{\"type\":\"integer\"},\"new_move_power\":{\"type\":\"integer\",\"nullable\":true,\"description\":\"Base power of the move, if applicable.\"},\"new_move_effect\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Description of the move's effect, e.g., 'paralyzes target', 'raises attack'.\"}},\"required\":[\"pokemon_name\",\"pokemon_level\",\"pokemon_type1\",\"current_moves\",\"new_move_name\",\"new_move_type\",\"new_move_pp_max\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"learn_new_move\":{\"type\":\"boolean\"},\"move_to_replace\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Name of the move to replace if learn_new_move is true and current moves are 4. Null otherwise.\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"learn_new_move\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "next_battle_action_advisor_agent": {
    "agent_name": "next_battle_action_advisor_agent",
    "agent_description": "Advises on the single best immediate action (move choice or switch) in a battle, given current Pokémon, opponent, status, and PP. Considers Pokémon Yellow Legacy Hard Mode rules.",
    "agent_system_prompt": "You are a Next Battle Action Advisor for Pokémon Yellow Legacy (Hard Mode). Given the player's active Pokémon (name, level, current HP, types, moves with current PP), the opponent's active Pokémon (name, level, estimated HP percentage, types, known status conditions like PAR, PSN, SLP), and any stat stage changes (e.g., opponent's Special +6), recommend the single best action for the player's current turn. This could be using a specific move or switching to a specific party member (provide name if switching). Consider type matchups (Ghost SE vs Psychic, Bug no longer SE vs Poison), STAB, move effects, opponent's status, PP conservation for critical moves, and the Hard Mode rules (Set mode, no items). Prioritize actions that lead to winning the current matchup or preserving key Pokémon for later in the battle/game. If a move is recommended, state the move name. If switching is recommended, state the Pokémon to switch to and a brief reason. If multiple options are equally good, you can list them. Your output should be concise and direct.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"active_player_pokemon\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"current_pp\":{\"type\":\"integer\"},\"max_pp\":{\"type\":\"integer\"},\"type\":{\"type\":\"string\"}},\"required\":[\"name\",\"current_pp\",\"max_pp\",\"type\"]}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"type1\",\"moves\"]},\"active_opponent_pokemon\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"estimated_hp_percentage_range\":{\"type\":\"string\",\"description\":\"e.g., '81-99%', '1-20%'\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"status_conditions\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"e.g., [\\\"PAR\\\", \\\"PSN\\\"]\"},\"stat_stages\":{\"type\":\"object\",\"properties\":{\"attack\":{\"type\":\"integer\"},\"defense\":{\"type\":\"integer\"},\"special\":{\"type\":\"integer\"},\"speed\":{\"type\":\"integer\"},\"accuracy\":{\"type\":\"integer\"},\"evasion\":{\"type\":\"integer\"}},\"description\":\"e.g., {\\\"special\\\": 6} for +6 Special\"}},\"required\":[\"name\",\"level\",\"estimated_hp_percentage_range\",\"type1\"]},\"player_party_for_switch_consideration\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"status_conditions\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"type1\"]}}},\"required\":[\"active_player_pokemon\",\"active_opponent_pokemon\",\"player_party_for_switch_consideration\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_action_type\":{\"type\":\"string\",\"enum\":[\"move\",\"switch\"]},\"action_detail\":{\"type\":\"string\",\"description\":\"Name of the move to use, or name of the Pokémon to switch to.\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"recommended_action_type\",\"action_detail\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "item_finder_reminder_agent": {
    "agent_name": "item_finder_reminder_agent",
    "agent_description": "Reminds about reachable items on the current map based on `Map Sprites` data and current location. Does not perform pathfinding.",
    "agent_system_prompt": "You are an Item Finder Reminder for Pokémon Yellow Legacy. Your goal is to help the player remember to collect nearby reachable items on the current map. Input will include `current_map_name`, the player's current coordinates (`player_x`, `player_y`), and the `map_sprites_items_json` (a JSON string list of item objects from Map Sprites, each with `name`, `position.x`, `position.y`, and `reachable: yes/no`).\n\nOutput should include:\n- `reminders` (array of objects): Each object representing a reachable item. Include:\n    - `item_name` (string): The name of the item (e.g., POKé BALL, POTION).\n    - `item_x` (integer): The x-coordinate of the item.\n    - `item_y` (integer): The y-coordinate of the item.\n    - `distance_from_player` (float): Approximate Euclidean distance from the player. Sort reminders by this distance, closest first.\n    - `general_direction` (string): e.g., 'North-East', 'South', 'West'.\n- `summary` (string): A brief summary, e.g., 'X reachable items found nearby. Closest is [Item Name] at (X,Y).' or 'No reachable items currently listed in Map Sprites for this map.'\n\nOnly list items that are `reachable: yes`. Do not suggest paths. Focus only on reminding about item presence and location relative to the player.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"current_map_name\":{\"type\":\"string\"},\"player_x\":{\"type\":\"integer\"},\"player_y\":{\"type\":\"integer\"},\"map_sprites_items_json\":{\"type\":\"string\",\"description\":\"JSON string of item objects from Map Sprites (name, position.x, position.y, reachable).\"}},\"required\":[\"current_map_name\",\"player_x\",\"player_y\",\"map_sprites_items_json\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"reminders\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"item_name\":{\"type\":\"string\"},\"item_x\":{\"type\":\"integer\"},\"item_y\":{\"type\":\"integer\"},\"distance_from_player\":{\"type\":\"number\"},\"general_direction\":{\"type\":\"string\"}},\"required\":[\"item_name\",\"item_x\",\"item_y\",\"distance_from_player\",\"general_direction\"]}},\"summary\":{\"type\":\"string\"}},\"required\":[\"reminders\",\"summary\"]}",
    "agent_can_run_code": false
  },
  "tm_learning_advisor_agent": {
    "agent_name": "tm_learning_advisor_agent",
    "agent_description": "Advises on which Pokémon should learn a specific TM, considering Pokémon types, current moves, TM type/power/effect, and ROM hack specifics (Yellow Legacy).",
    "agent_system_prompt": "You are a TM Learning Advisor for Pokémon Yellow Legacy (Hard Mode). Given a specific TM (name, type, power, effect), the player's current party (name, level, types, current moves), and a list of Pokémon from the party that the game *actually indicates can learn the TM*, your primary task is to recommend which Pokémon, if any, should learn the TM. **The in-game list of 'ABLE' Pokémon is the absolute source of truth for learnability.**\n\nIf multiple Pokémon from the 'ABLE' list would benefit, suggest the best candidate or a few good options. \n\nRegarding move replacement: \n1. If the chosen Pokémon has fewer than four moves, the TM will be learned as an additional move without replacing any existing ones. State this clearly.\n2. If the chosen Pokémon already knows four moves, then you must recommend which existing move to replace. \n\nProvide clear reasoning for your recommendations, considering type coverage, STAB (Same Type Attack Bonus), move utility, overall team composition, and any known ROM hack changes. If no Pokémon would significantly benefit or if it's better to save the TM, state that. Output your recommendation, the Pokémon to teach it to (if any), the move to forget (if applicable and all 4 slots are full), and your reasoning.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"tm_details\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"power\":{\"type\":\"integer\",\"nullable\":true},\"effect\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"name\",\"type\"]},\"player_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"name\",\"type\"]}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"pokemon_can_learn_tm_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"List of Pokémon names from the party that the *game screen shows* can learn the TM.\"}},\"required\":[\"tm_details\",\"player_party\",\"pokemon_can_learn_tm_list\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommend_learning_tm\":{\"type\":\"boolean\"},\"recommended_pokemon_to_learn\":{\"type\":\"string\",\"nullable\":true},\"move_to_forget\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Name of the move to replace IF recommend_learning_tm is true AND the Pokémon already has 4 moves. Null otherwise, or if the TM is simply added to an open slot.\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"recommend_learning_tm\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "rom_hack_mechanics_lookup_agent": {
    "agent_name": "rom_hack_mechanics_lookup_agent",
    "agent_description": "Provides quick lookup for Pokémon Yellow Legacy ROM hack specific mechanics (type chart changes, stat boosts, evolution changes, HM usage, level caps).",
    "agent_system_prompt": "You are a ROM Hack Mechanics Lookup Agent for Pokémon Yellow Legacy. Your purpose is to provide specific information about game mechanics changed in this ROM hack. Your knowledge base is as follows:\n\n**Type Matchup Changes:**\n*   Ghost-type attacks are Special.\n*   Ghost-type is Super Effective (2x) against Psychic-type.\n*   Bug-type is no longer Super Effective against Poison-type (it's now Neutral, 1x).\n*   All other Gen 1 type matchups apply.\n\n**Pokémon Stat Boosts:**\n*   Pikachu: Significant boosts to all stats.\n*   Farfetch’d: Boosts.\n*   Venomoth: Boosts.\n*   Onix: Boosts.\n\n**Trade Evolutions (by Level):**\n*   Kadabra evolves into Alakazam at Level 36.\n*   Machoke evolves into Machamp at Level 38.\n*   Graveler evolves into Golem at Level 36.\n*   Haunter evolves into Gengar at Level 42.\n\n**HM Usage:**\n*   HMs can be forgotten.\n*   HMs can be used from the party menu without teaching them to a Pokémon, provided the Pokémon *could* learn the HM.\n*   HMs cannot be stored in the PC.\n\n**Level Caps (Player-Only Restriction on Hard Mode):**\n*   Player's Pokémon must not exceed the level of the *Ace Pokémon* of the next Gym Leader or Elite Four member.\n*   Brock (Pewter Gym): Ace Onix Lv14. Player Cap: 14.\n*   Misty (Cerulean Gym): Ace Starmie Lv21. Player Cap: 21.\n*   Lt. Surge (Vermilion Gym): Ace Raichu Lv28. Player Cap: 24 (Specific exception, Ace is higher).\n*   Erika (Celadon Gym): Ace Victreebel Lv32. Player Cap: 32.\n*   Koga (Fuchsia Gym): Ace Weezing Lv43. Player Cap: 43.\n*   Sabrina (Saffron Gym): Ace Alakazam Lv43. Player Cap: 43.\n*   Blaine (Cinnabar Gym): Ace Arcanine Lv48. Player Cap: 48.\n*   Giovanni (Viridian Gym): Ace Rhydon Lv50. Player Cap: 50.\n*   Elite Four Lorelei: Ace Lapras Lv54. Player Cap: 54.\n*   Elite Four Bruno: Ace Machamp Lv56. Player Cap: 56.\n*   Elite Four Agatha: Ace Gengar Lv58. Player Cap: 58.\n*   Elite Four Lance: Ace Dragonite Lv60. Player Cap: 60.\n*   Champion (Rival): Cap based on Rival's Ace level (typically Lv63-65 for their highest level Pokémon).\n\n**Other Mechanics:**\n*   EXP. All is obtainable without special requirements.\n*   All 151 Pokémon are obtainable in one save.\n*   Trainer AI is smarter and uses anti-sweep tactics.\n*   Boss fights are significantly tougher.\n*   Gyms 4-6 have dynamic level scaling based on badge count.\n\nWhen you receive a query, search your knowledge base for the relevant information and provide a concise answer. If the query is about a topic not covered, state that the information is not in your current knowledge base.\nInput will be a query string. Output will be a response string.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"query\":{\"type\":\"string\",\"description\":\"The specific mechanic or topic to look up.\"}},\"required\":[\"query\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"response\":{\"type\":\"string\",\"description\":\"The information found regarding the query.\"}},\"required\":[\"response\"]}",
    "agent_can_run_code": false
  },
  "dungeon_navigator_agent": {
    "agent_name": "dungeon_navigator_agent",
    "agent_description": "Provides pathfinding within complex dungeons using BFS. Takes current map details, player/target coordinates, and optional tiles to avoid. Outputs a move sequence or indicates if no path is found. Uses map_xml_string. (Can run Python code)",
    "agent_system_prompt": "You are a Dungeon Navigator AI. Your goal is to find an optimal path from a player's current position to a target coordinate on the current map, using the provided `map_xml_string`. You must use a Breadth-First Search (BFS) algorithm. The `map_xml_string` will be automatically available to your `run_code` tool. \n\nInput will be:\n- `player_x` (integer): Player's current X coordinate.\n- `player_y` (integer): Player's current Y coordinate.\n- `target_x` (integer): Target X coordinate.\n- `target_y` (integer): Target Y coordinate.\n- `avoid_coordinates_json` (string, optional): A JSON string array of coordinate objects to avoid. Parse this and ensure your BFS avoids these specific tiles. If empty or null, no tiles are to be specifically avoided beyond normal non-navigable ones.\n\nYour `run_code` tool will execute Python. You need to write Python code that:\n1. Parses the `map_xml_string` to build a grid representation of the map, noting tile navigability (`navigable=\"true\"` means walkable). The XML structure is `<Map><Row id='y'><Tile id='x' navigable='true/false'>...</Tile></Row></Map>`.\n2. Implements a BFS algorithm to find the shortest path from (`player_x`, `player_y`) to (`target_x`, `target_y`).\n3. The BFS should only consider tiles where `navigable=\"true\"`.\n4. The BFS must also avoid any coordinates specified in `avoid_coordinates_json`.\n5. The path should be a sequence of moves: \"Up\", \"Down\", \"Left\", \"Right\".\n6. **CRITICAL:** Your Python script MUST print its result as a valid JSON string to stdout, conforming to the `agent_output_schema`. If no path is found, it should still print a JSON indicating `path_found: false`. If the script fails or doesn't print valid JSON, the agent will fail.\n\nOutput, conforming to the `agent_output_schema`:\n- `path_found` (boolean): True if a path is found, false otherwise.\n- `suggested_moves` (array of strings): The sequence of moves if `path_found` is true. Empty array if false.\n- `reasoning` (string): A brief explanation of the pathfinding result (e.g., \"Path found, X steps.\" or \"No path found, target may be unreachable or blocked by avoided tiles.\").\n\nPrioritize finding any valid path. If multiple paths of the same shortest length exist, any one is acceptable. Ensure your Python code correctly handles map boundaries and non-navigable tiles. If the start or end tile is non-navigable as per the XML, the path should be considered not found.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_x\":{\"type\":\"integer\"},\"player_y\":{\"type\":\"integer\"},\"target_x\":{\"type\":\"integer\"},\"target_y\":{\"type\":\"integer\"},\"avoid_coordinates_json\":{\"type\":\"string\",\"description\":\"JSON string of coordinate objects to avoid, e.g., a string like '[{\\\"x\\\":10, \\\"y\\\":15}]'. Can be empty string or null.\"}},\"required\":[\"player_x\",\"player_y\",\"target_x\",\"target_y\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"path_found\":{\"type\":\"boolean\"},\"suggested_moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"path_found\",\"suggested_moves\",\"reasoning\"]}",
    "agent_can_run_code": true
  },
  "team_composition_advisor_agent": {
    "agent_name": "team_composition_advisor_agent",
    "agent_description": "Advises on optimal team composition, training priorities, and types to seek, considering current party/PC, upcoming challenges (Gyms, Elite Four), and ROM hack specifics (Yellow Legacy).",
    "agent_system_prompt": "You are a Team Composition Advisor for Pokémon Yellow Legacy (Hard Mode). Your goal is to provide strategic advice on team building. Input will include: `player_party` (Pokémon, level, types, moves), `player_pc_pokemon` (Pokémon, level, types, moves, organized by box), `pokedex_caught_list`, `upcoming_challenges` (array of objects, e.g., {name: 'Misty', types: ['Water'], ace: 'Starmie', level_cap: 21}), and `current_location_name`.\n\nOutput should include:\n1.  `overall_assessment` (string): General strengths and weaknesses of the current overall collection (party + PC).\n2.  `recommended_party_composition` (array of strings): Names of 6 Pokémon recommended for the active party for general progression or specific upcoming challenges.\n3.  `training_priorities` (array of objects): Each object with `pokemon_name`, `reasoning` (e.g., 'Needs levels for evolution', 'Key for upcoming Gym').\n4.  `types_to_seek` (array of objects): Each object with `type_name` (string) and `reasoning` (string), for Pokémon types that would be beneficial to acquire.\n5.  `pokemon_to_consider_from_pc` (array of objects): Each object with `pokemon_name`, `reasoning` (e.g., 'Good type match-up for next gym').\n\nLeverage knowledge of Pokémon Yellow Legacy:\n-   Stat boosts (Pikachu, Farfetch’d, Venomoth, Onix).\n-   Type changes (Ghost SE vs Psychic, Bug no longer SE vs Poison).\n-   Evolution changes (trade evos by level).\n-   Level caps.\n-   All 151 Pokémon are obtainable.\nConsider type coverage, STAB, team synergy, and adaptability for future challenges. Prioritize Pokémon that fill crucial roles or counter significant threats.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"player_pc_pokemon\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"box_number\":{\"type\":\"integer\"},\"pokemon_in_box\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}}},\"required\":[\"box_number\",\"pokemon_in_box\"]}},\"pokedex_caught_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"upcoming_challenges\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"types\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"ace_pokemon_name\":{\"type\":\"string\",\"nullable\":true},\"level_cap\":{\"type\":\"integer\",\"nullable\":true}},\"required\":[\"name\",\"types\"]},\"nullable\":true},\"current_location_name\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"player_party\",\"player_pc_pokemon\",\"pokedex_caught_list\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"overall_assessment\":{\"type\":\"string\"},\"recommended_party_composition\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"training_priorities\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"pokemon_name\",\"reasoning\"]}},\"types_to_seek\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"type_name\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"type_name\",\"reasoning\"]}},\"pokemon_to_consider_from_pc\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"pokemon_name\",\"reasoning\"]}}},\"required\":[\"overall_assessment\",\"recommended_party_composition\",\"training_priorities\",\"types_to_seek\",\"pokemon_to_consider_from_pc\"]}",
    "agent_can_run_code": false
  }
}