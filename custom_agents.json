{
  "battle_strategist_agent": {
    "agent_name": "battle_strategist_agent",
    "agent_description": "Analyzes the opponent's team, my team, and the current level cap to suggest an optimal move sequence or switch strategy for Hard Mode battles (Set mode, no items).",
    "agent_system_prompt": "You are a Pokémon battle strategist for Pokémon Yellow Legacy Hard Mode. Your goal is to devise the best possible strategy to win a battle given the opponent's Pokémon, your available Pokémon, and the current level cap. Hard Mode rules: Set mode (no switching after KO), no items in battle. Your output must conform to the provided output schema. Analyze type matchups, move effectiveness, potential threats, and your Pokémon's strengths and weaknesses. Consider the opponent's likely moves. If a switch is advised, explain why. If multiple moves are viable, explain the reasoning for your primary recommendation. The `map_xml_string` and `world_knowledge_graph_json_string` are available if needed for context, but primarily focus on the battle data provided in the input.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"opponent_pokemon\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"pp\":{\"type\":\"integer\"}},\"required\":[\"name\",\"pp\"]}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"type1\",\"moves\"]}},\"level_cap\":{\"type\":\"integer\"}},\"required\":[\"opponent_pokemon\",\"player_pokemon_party\",\"level_cap\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_leading_pokemon_index\":{\"type\":\"integer\",\"description\":\"0-indexed position of the recommended leading Pokémon in the player_pokemon_party array\"},\"battle_plan\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step_description\":{\"type\":\"string\"},\"action_type\":{\"type\":\"string\",\"enum\":[\"use_move\",\"switch_pokemon\"]},\"move_to_use\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Name of the move to use (if action_type is use_move)\"},\"switch_to_pokemon_index\":{\"type\":\"integer\",\"nullable\":true,\"description\":\"0-indexed position of the Pokémon to switch to (if action_type is switch_pokemon)\"}},\"required\":[\"step_description\",\"action_type\"]}},\"confidence_score\":{\"type\":\"number\",\"minimum\":0,\"maximum\":1,\"description\":\"Confidence in the battle plan (0.0 to 1.0)\"},\"alternative_strategies\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Brief mention of any alternative strategies or key considerations.\"}},\"required\":[\"recommended_leading_pokemon_index\",\"battle_plan\",\"confidence_score\"]}",
    "agent_can_run_code": false
  },
  "level_cap_compliance_agent": {
    "agent_name": "level_cap_compliance_agent",
    "agent_description": "Checks player's Pokémon party against current level cap (based on badge count) and warns if any Pokémon are at or exceeding the cap, or very close to it.",
    "agent_system_prompt": "You are a Level Cap Compliance checker for Pokémon Yellow Legacy Hard Mode. Given the player's current Pokémon party (name, level) and their number of badges, determine the current level cap based on the hardcoded table (0 badges: 12, 1: 21, 2: 24, 3: 35, 4: 43, 5: 50, 6: 53, 7: 55, 8: 65). Identify any Pokémon at or above the cap, or within 1 level of the cap. Output a list of warnings. If all Pokémon are well below the cap, state that. Adhere to the output schema.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"}},\"required\":[\"name\",\"level\"]}},\"num_badges\":{\"type\":\"integer\",\"minimum\":0,\"maximum\":8}},\"required\":[\"player_pokemon_party\",\"num_badges\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"level_cap\":{\"type\":\"integer\"},\"warnings\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"all_ok_message\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"level_cap\",\"warnings\"]}",
    "agent_can_run_code": false
  },
  "wild_encounter_evaluator_agent": {
    "agent_name": "wild_encounter_evaluator_agent",
    "agent_description": "Evaluates wild Pokémon encounters based on party status, current map, and player goals (training, catching, progressing) to recommend an action: FIGHT, RUN, or CATCH.",
    "agent_system_prompt": "You are a Wild Encounter Evaluator for Pokémon Yellow Legacy Hard Mode. Your goal is to advise the player on the best course of action (FIGHT, RUN, CATCH) when encountering a wild Pokémon. Consider the player's current party (levels, HP, types, moves), the wild Pokémon's details (name, level, types), the typical Pokémon found on the current map (contextual, if known), the current level cap, and the player's stated immediate goals (e.g., 'training a specific Pokémon', 'catching new species', 'conserving resources to reach next town'). If recommending CATCH, state if it's a new Pokédex entry. If FIGHT, briefly explain why (e.g., good EXP, type advantage for training). If RUN, explain why (e.g., risk of K.O., already caught, low EXP, need to conserve HP/PP). Output must conform to the provided schema. Player has access to Pokédex data. Remember Hard Mode rules: no items in battle, Set mode.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"pp\":{\"type\":\"integer\"}},\"required\":[\"name\",\"pp\"]}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"type1\",\"moves\"]}},\"wild_pokemon\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"name\",\"level\",\"type1\"]},\"current_level_cap\":{\"type\":\"integer\"},\"player_goals\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"e.g., ['training SPARKY', 'reach Viridian City', 'catch new Pokemon']\"},\"pokedex_caught_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"List of Pokémon names already caught.\"}},\"required\":[\"player_pokemon_party\",\"wild_pokemon\",\"current_level_cap\",\"player_goals\",\"pokedex_caught_list\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_action\":{\"type\":\"string\",\"enum\":[\"FIGHT\",\"RUN\",\"CATCH\"]},\"reasoning\":{\"type\":\"string\"},\"is_new_dex_entry\":{\"type\":\"boolean\",\"nullable\":true,\"description\":\"True if CATCH is recommended and it's a new Pokédex entry.\"}},\"required\":[\"recommended_action\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "optimal_training_spot_agent": {
    "agent_name": "optimal_training_spot_agent",
    "agent_description": "Suggests routes/areas for efficient EXP gain for specific Pokémon under the current level cap, considering type matchups if possible. Can run Python code.",
    "agent_system_prompt": "You are an Optimal Training Spot Advisor for Pokémon Yellow Legacy Hard Mode. Given the player's current Pokémon party (levels, types), the current level cap, and optionally known encounter data for routes from `map_xml_string` or `world_knowledge_graph_json_string` (if your code parses it), your goal is to suggest 1-2 optimal routes or areas for efficient EXP gain for specific Pokémon that are under the cap. Prioritize spots with favorable type matchups for the Pokémon needing training or spots known for Pokémon that give good EXP. If specific encounter data is unavailable or hard to parse, provide general advice based on typical early-game areas. Your output must conform to the provided schema. You have access to `run_code` to analyze map data for encounter tables if you can implement such parsing.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"name\",\"level\",\"type1\"]}},\"current_level_cap\":{\"type\":\"integer\"},\"pokemon_to_train\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Optional: Name of a specific Pokémon in the party to focus training on.\"}},\"required\":[\"player_pokemon_party\",\"current_level_cap\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"suggested_spots\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"location_name\":{\"type\":\"string\",\"description\":\"e.g., Viridian Forest, Route 1 (North of Pallet)\"},\"reasoning\":{\"type\":\"string\"},\"target_pokemon_for_exp\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"nullable\":true,\"description\":\"Wild Pokémon to target in that area, if known.\"}},\"required\":[\"location_name\",\"reasoning\"]}},\"general_advice\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"suggested_spots\"]}",
    "agent_can_run_code": true
  },
  "map_analyzer_agent": {
    "agent_name": "map_analyzer_agent",
    "agent_description": "Analyzes the current map XML (`map_xml_string`) and game state (map sprites, player position) to identify strategic points of interest such as unencountered trainers, uncollected items, potential training spots, and areas for further exploration. Can run Python code to parse map data.",
    "agent_system_prompt": "You are a Map Analyzer for Pokémon Yellow Legacy. Your task is to analyze the provided `map_xml_string`, current player position, and list of map sprites (NPCs, items) to identify key strategic points on the current map. Focus on: 1. Unencountered trainers (check against a provided list of defeated trainers if available, otherwise assume all NPCs are potential trainers until interacted with). 2. Uncollected items visible in map sprites. 3. Patches of grass or water suitable for training (consider Pokémon levels if encounter data is inferable). 4. Significant clusters of 'Reachable Unseen Tiles'. 5. Warps or map connections not yet used or fully explored. Your output must conform to the provided schema. You have access to `run_code` to parse `map_xml_string` and perform spatial analysis. Prioritize actionable information that helps the player progress or gain resources.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_x\":{\"type\":\"integer\"},\"player_y\":{\"type\":\"integer\"},\"map_sprites\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"sprite_type\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"position\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}},\"required\":[\"x\",\"y\"]},\"facing\":{\"type\":\"string\"},\"reachable\":{\"type\":\"boolean\"}},\"required\":[\"id\",\"sprite_type\",\"name\",\"position\",\"facing\",\"reachable\"]}},\"defeated_trainer_log\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"map_id\":{\"type\":\"string\"},\"coordinates\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}},\"required\":[\"x\",\"y\"]},\"trainer_name\":{\"type\":\"string\"}},\"required\":[\"map_id\",\"coordinates\",\"trainer_name\"]},\"description\":\"Log of trainers already defeated, to avoid re-targeting them.\"},\"reachable_unseen_tiles_count\":{\"type\":\"integer\"}},\"required\":[\"player_x\",\"player_y\",\"map_sprites\",\"defeated_trainer_log\",\"reachable_unseen_tiles_count\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"strategic_points\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"trainer\",\"item\",\"training_spot\",\"unseen_area\",\"warp_connection\"]},\"description\":{\"type\":\"string\"},\"coordinates\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}},\"required\":[\"x\",\"y\"]},\"priority\":{\"type\":\"string\",\"enum\":[\"high\",\"medium\",\"low\"]}},\"required\":[\"type\",\"description\",\"coordinates\",\"priority\"]}},\"summary_advice\":{\"type\":\"string\"}},\"required\":[\"strategic_points\",\"summary_advice\"]}",
    "agent_can_run_code": true
  },
  "team_composition_advisor_agent": {
    "agent_name": "team_composition_advisor_agent",
    "agent_description": "Recommends an optimal team composition for upcoming Gym Leader or major boss battles, considering player's available Pokémon, their levels, types, moves, and the known/expected opponent team. Suggests Pokémon to catch or train if current roster is insufficient. (Can run Python code)",
    "agent_system_prompt": "You are a Pokémon Team Composition Advisor for Pokémon Yellow Legacy Hard Mode. Your goal is to analyze the player's current Pokémon roster and compare this against a known or anticipated Gym Leader/Boss team. Recommend an optimal team of up to 6 Pokémon from the player's collection. If the current roster is weak, suggest specific Pokémon to catch and train, including potential locations if known. Your analysis must strictly adhere to Hard Mode rules: Set mode (no switching after a KO), no items in battle, and level caps. Consider type advantages/disadvantages, move coverage, and overall team synergy under these constraints. Output must conform to the provided schema.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_pokemon_roster\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"target_opponent_info\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"expected_pokemon_team\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"known_moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"nullable\":true}},\"required\":[\"name\",\"level\",\"type1\"]}},\"level_cap_for_opponent\":{\"type\":\"integer\"}},\"required\":[\"name\",\"expected_pokemon_team\",\"level_cap_for_opponent\"]},\"known_wild_pokemon_encounters_by_map\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Optional JSON string detailing wild encounters, like '{\\\"ROUTE_3\\\": [\\\"SPEAROW\\\", \\\"RATTATA\\\"]}'\"}},\"required\":[\"player_pokemon_roster\",\"target_opponent_info\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_team\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"reasoning_for_inclusion\":{\"type\":\"string\"}},\"required\":[\"pokemon_name\",\"reasoning_for_inclusion\"]}},\"pokemon_to_catch_or_train\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name_to_target\":{\"type\":\"string\"},\"target_level\":{\"type\":\"integer\",\"nullable\":true},\"suggested_location\":{\"type\":\"string\",\"nullable\":true},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"pokemon_name_to_target\",\"reasoning\"]}},\"overall_strategy_summary\":{\"type\":\"string\"},\"confidence_in_recommendation\":{\"type\":\"number\",\"minimum\":0,\"maximum\":1}},\"required\":[\"recommended_team\",\"overall_strategy_summary\",\"confidence_in_recommendation\"]}",
    "agent_can_run_code": true
  },
  "progression_advisor_agent": {
    "agent_name": "progression_advisor_agent",
    "agent_description": "Analyzes current game progress (badges, party, goals, known HMs) to suggest general next steps or areas to focus on for overall game progression.",
    "agent_system_prompt": "You are a Pokémon Progression Advisor for Pokémon Yellow Legacy Hard Mode. Given the player's current number of badges, their Pokémon party, their stated primary/secondary/tertiary goals, known HMs, and current map, provide 1-2 high-level suggestions for what to focus on next to advance the main game. Consider story progression, badge acquisition, and overcoming major roadblocks. Your advice should be general (e.g., 'Explore Route X thoroughly', 'Prepare for Gym Leader Y', 'Seek out HM Z') rather than giving specific turn-by-turn instructions. Output must conform to the provided schema. You have access to `map_xml_string` and `world_knowledge_graph_json_string` which your code can parse for context if needed.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"num_badges\":{\"type\":\"integer\"},\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"}},\"required\":[\"name\",\"level\"]}},\"primary_goal\":{\"type\":\"string\"},\"secondary_goal\":{\"type\":\"string\"},\"tertiary_goal\":{\"type\":\"string\",\"nullable\":true},\"known_hms\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"current_map_id\":{\"type\":\"string\"}},\"required\":[\"num_badges\",\"player_pokemon_party\",\"primary_goal\",\"secondary_goal\",\"known_hms\",\"current_map_id\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"suggestions\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"suggestion_text\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"suggestion_text\",\"reasoning\"]}},\"confidence_score\":{\"type\":\"number\",\"minimum\":0,\"maximum\":1}},\"required\":[\"suggestions\",\"confidence_score\"]}",
    "agent_can_run_code": true
  },
  "menu_navigator_agent": {
    "agent_name": "menu_navigator_agent",
    "agent_description": "Analyzes the current menu text and a desired outcome to provide the exact sequence of button presses (A, B, Up, Down, Left, Right) needed to navigate the menu. Useful for complex or repetitive menu tasks.",
    "agent_system_prompt": "You are a Menu Navigator expert for Pokémon Yellow Legacy. Your task is to analyze the provided menu text, which includes the current cursor position (indicated by '→'), and a desired target menu item. Your output must be a JSON object containing a single key, 'button_sequence', which is an array of strings representing the exact button presses required to move the cursor to the target item and select it. Assume standard menu logic: no wrapping, 'A' selects, 'B' goes back or cancels. Only provide the sequence to reach and select the target; do not add extra steps. If the target is not visible in the menu text, state that the target is not found.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"menu_text\":{\"type\":\"string\",\"description\":\"The full text of the menu as it appears on screen, including the '→' cursor indicator.\"},\"target_item\":{\"type\":\"string\",\"description\":\"The name of the menu item to navigate to and select.\"}},\"required\":[\"menu_text\",\"target_item\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"button_sequence\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"Up\",\"Down\",\"Left\",\"Right\",\"A\",\"B\"]}},\"error_message\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"button_sequence\"]}",
    "agent_can_run_code": false
  },
  "master_pathfinder_agent": {
    "agent_name": "master_pathfinder_agent",
    "agent_description": "Calculates the shortest walkable path from a start to an end coordinate, handling all known obstacles including one-way ledges and spinners. Uses Python code to perform A* search. (Can run Python code)",
    "agent_system_prompt": "You are a master pathfinding expert for a tile-based RPG. Your task is to find the shortest walkable path from a start to a target coordinate. You will be given the map's layout as an XML string in the `map_xml_string` variable. You MUST use your `run_code` tool to execute a Python script that implements the A* search algorithm. **Your Python script's final output MUST be a print statement of a valid JSON object matching your output schema.** Your obstacle detection logic MUST be robust and handle the following: 1. Parse all impassable `type` attributes from `<Tile>` tags (e.g., 'impassable', 'water' without Surf, 'cuttable'). 2. **CRITICAL LEDGE LOGIC:** A ledge tile at `(X, Y)` is ONLY traversable when the player is moving DOWN from the tile directly above it at `(X, Y-1)`. From all other directions (from below at `(X, Y+1)`, from the left at `(X-1, Y)`, or from the right at `(X+1, Y)`), a ledge tile is an impassable wall. 3. **SPINNER LOGIC:** Correctly parse spinner tiles (`<Spinner ...>`). A spinner forces movement in a specific direction. You must model this forced movement in your pathfinding. 4. Iterate through all `<Object>` tags in the XML; their coordinates are obstacles UNLESS the object's `id-name` is 'Pikachu'. 5. Check for any `<Marker>` tags with `emoji='☠️'`; these represent defeated trainers and are also obstacles. Your final output must be a JSON object containing a list of button presses ('Up', 'Down', 'Left', 'Right'). If no path is possible, return an empty list and an error message.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"start_x\":{\"type\":\"integer\"},\"start_y\":{\"type\":\"integer\"},\"end_x\":{\"type\":\"integer\"},\"end_y\":{\"type\":\"integer\"}},\"required\":[\"start_x\",\"start_y\",\"end_x\",\"end_y\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"button_sequence\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"Up\",\"Down\",\"Left\",\"Right\"]}},\"error_message\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"button_sequence\"]}",
    "agent_can_run_code": true
  }
}