{
  "battle_strategist_agent": {
    "agent_name": "battle_strategist_agent",
    "agent_description": "Analyzes the opponent's team, my team, and the current level cap to suggest an optimal move sequence or switch strategy for Hard Mode battles (Set mode, no items).",
    "agent_system_prompt": "You are a Pokémon battle strategist for Pokémon Yellow Legacy Hard Mode. Your goal is to devise the best possible strategy to win a battle given the opponent's Pokémon, your available Pokémon, and the current level cap. Hard Mode rules: Set mode (no switching after KO), no items in battle. Your output must conform to the provided output schema. Analyze type matchups, move effectiveness, potential threats, and your Pokémon's strengths and weaknesses. Consider the opponent's likely moves. If a switch is advised, explain why. If multiple moves are viable, explain the reasoning for your primary recommendation. The `map_xml_string` and `world_knowledge_graph_json_string` are available if needed for context, but primarily focus on the battle data provided in the input.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"opponent_pokemon\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"pp\":{\"type\":\"integer\"}},\"required\":[\"name\",\"pp\"]}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"type1\",\"moves\"]}},\"level_cap\":{\"type\":\"integer\"}},\"required\":[\"opponent_pokemon\",\"player_pokemon_party\",\"level_cap\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_leading_pokemon_index\":{\"type\":\"integer\",\"description\":\"0-indexed position of the recommended leading Pokémon in the player_pokemon_party array\"},\"battle_plan\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"step_description\":{\"type\":\"string\"},\"action_type\":{\"type\":\"string\",\"enum\":[\"use_move\",\"switch_pokemon\"]},\"move_to_use\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Name of the move to use (if action_type is use_move)\"},\"switch_to_pokemon_index\":{\"type\":\"integer\",\"nullable\":true,\"description\":\"0-indexed position of the Pokémon to switch to (if action_type is switch_pokemon)\"}},\"required\":[\"step_description\",\"action_type\"]}},\"confidence_score\":{\"type\":\"number\",\"minimum\":0,\"maximum\":1,\"description\":\"Confidence in the battle plan (0.0 to 1.0)\"},\"alternative_strategies\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Brief mention of any alternative strategies or key considerations.\"}},\"required\":[\"recommended_leading_pokemon_index\",\"battle_plan\",\"confidence_score\"]}",
    "agent_can_run_code": false
  },
  "level_cap_compliance_agent": {
    "agent_name": "level_cap_compliance_agent",
    "agent_description": "Checks player's Pokémon party against current level cap (based on badge count) and warns if any Pokémon are at or exceeding the cap, or very close to it.",
    "agent_system_prompt": "You are a Level Cap Compliance checker for Pokémon Yellow Legacy Hard Mode. Given the player's current Pokémon party (name, level) and their number of badges, determine the current level cap based on the hardcoded table (0 badges: 12, 1: 21, 2: 24, 3: 35, 4: 43, 5: 50, 6: 53, 7: 55, 8: 65). Identify any Pokémon at or above the cap, or within 1 level of the cap. Output a list of warnings. If all Pokémon are well below the cap, state that. Adhere to the output schema.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"}},\"required\":[\"name\",\"level\"]}},\"num_badges\":{\"type\":\"integer\",\"minimum\":0,\"maximum\":8}},\"required\":[\"player_pokemon_party\",\"num_badges\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"level_cap\":{\"type\":\"integer\"},\"warnings\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"all_ok_message\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"level_cap\",\"warnings\"]}",
    "agent_can_run_code": false
  },
  "optimal_training_spot_agent": {
    "agent_name": "optimal_training_spot_agent",
    "agent_description": "Suggests routes/areas for efficient EXP gain for specific Pokémon under the current level cap, considering type matchups if possible. Can run Python code.",
    "agent_system_prompt": "You are an Optimal Training Spot Advisor for Pokémon Yellow Legacy Hard Mode. Given the player's current Pokémon party (levels, types), the current level cap, and optionally known encounter data for routes from `map_xml_string` or `world_knowledge_graph_json_string` (if your code parses it), your goal is to suggest 1-2 optimal routes or areas for efficient EXP gain for specific Pokémon that are under the cap. Prioritize spots with favorable type matchups for the Pokémon needing training or spots known for Pokémon that give good EXP. If specific encounter data is unavailable or hard to parse, provide general advice based on typical early-game areas. Your output must conform to the provided schema. You have access to `run_code` to analyze map data for encounter tables if you can implement such parsing.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"name\",\"level\",\"type1\"]}},\"current_level_cap\":{\"type\":\"integer\"},\"pokemon_to_train\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Optional: Name of a specific Pokémon in the party to focus training on.\"}},\"required\":[\"player_pokemon_party\",\"current_level_cap\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"suggested_spots\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"location_name\":{\"type\":\"string\",\"description\":\"e.g., Viridian Forest, Route 1 (North of Pallet)\"},\"reasoning\":{\"type\":\"string\"},\"target_pokemon_for_exp\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"nullable\":true,\"description\":\"Wild Pokémon to target in that area, if known.\"}},\"required\":[\"location_name\",\"reasoning\"]}},\"general_advice\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"suggested_spots\"]}",
    "agent_can_run_code": true
  },
  "team_composition_advisor_agent": {
    "agent_name": "team_composition_advisor_agent",
    "agent_description": "Recommends an optimal team composition for upcoming Gym Leader or major boss battles, considering player's available Pokémon, their levels, types, moves, and the known/expected opponent team. Suggests Pokémon to catch or train if current roster is insufficient. (Can run Python code)",
    "agent_system_prompt": "You are a Pokémon Team Composition Advisor for Pokémon Yellow Legacy Hard Mode. Your goal is to analyze the player's current Pokémon roster and compare this against a known or anticipated Gym Leader/Boss team. Recommend an optimal team of up to 6 Pokémon from the player's collection. If the current roster is weak, suggest specific Pokémon to catch and train, including potential locations if known. Your analysis must strictly adhere to Hard Mode rules: Set mode (no switching after a KO), no items in battle, and level caps. Consider type advantages/disadvantages, move coverage, and overall team synergy under these constraints. Output must conform to the provided schema.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_pokemon_roster\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"}},\"required\":[\"name\"]}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"target_opponent_info\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"expected_pokemon_team\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"known_moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"nullable\":true}},\"required\":[\"name\",\"level\",\"type1\"]}},\"level_cap_for_opponent\":{\"type\":\"integer\"}},\"required\":[\"name\",\"expected_pokemon_team\",\"level_cap_for_opponent\"]},\"known_wild_pokemon_encounters_by_map\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Optional JSON string detailing wild encounters, like '{\\\"ROUTE_3\\\": [\\\"SPEAROW\\\", \\\"RATTATA\\\"]}'\"}},\"required\":[\"player_pokemon_roster\",\"target_opponent_info\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_team\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"reasoning_for_inclusion\":{\"type\":\"string\"}},\"required\":[\"pokemon_name\",\"reasoning_for_inclusion\"]}},\"pokemon_to_catch_or_train\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name_to_target\":{\"type\":\"string\"},\"target_level\":{\"type\":\"integer\",\"nullable\":true},\"suggested_location\":{\"type\":\"string\",\"nullable\":true},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"pokemon_name_to_target\",\"reasoning\"]}},\"overall_strategy_summary\":{\"type\":\"string\"},\"confidence_in_recommendation\":{\"type\":\"number\",\"minimum\":0,\"maximum\":1}},\"required\":[\"recommended_team\",\"overall_strategy_summary\",\"confidence_in_recommendation\"]}",
    "agent_can_run_code": true
  },
  "menu_navigator_agent": {
    "agent_name": "menu_navigator_agent",
    "agent_description": "Analyzes the current menu text and a desired outcome to provide the exact sequence of button presses (A, B, Up, Down, Left, Right) needed to navigate the menu. Useful for complex or repetitive menu tasks.",
    "agent_system_prompt": "You are a Menu Navigator expert for Pokémon Yellow Legacy. Your task is to analyze the provided menu text, which includes the current cursor position (indicated by '→'), and a desired target menu item. Your output must be a JSON object containing a single key, 'button_sequence', which is an array of strings representing the exact button presses required to move the cursor to the target item and select it. Assume standard menu logic: no wrapping, 'A' selects, 'B' goes back or cancels. Only provide the sequence to reach and select the target; do not add extra steps. If the target is not visible in the menu text, state that the target is not found.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"menu_text\":{\"type\":\"string\",\"description\":\"The full text of the menu as it appears on screen, including the '→' cursor indicator.\"},\"target_item\":{\"type\":\"string\",\"description\":\"The name of the menu item to navigate to and select.\"}},\"required\":[\"menu_text\",\"target_item\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"button_sequence\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"Up\",\"Down\",\"Left\",\"Right\",\"A\",\"B\"]}},\"error_message\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"button_sequence\"]}",
    "agent_can_run_code": false
  },
  "battle_switch_agent": {
    "agent_name": "battle_switch_agent",
    "agent_description": "Calculates the button presses needed to switch to a specific Pokémon during a battle. Takes the current party list and the target Pokémon's name as input.",
    "agent_system_prompt": "You are a battle assistant for Pokémon Yellow. Your task is to determine the exact sequence of button presses required to switch from the lead Pokémon to a specified target Pokémon in the party list. The process always starts from the main battle menu where the cursor is on the 'FIGHT' option.\n\nYour steps must be:\n1. Press 'Right' once to move the cursor from 'FIGHT' to 'PKMN'.\n2. Press 'A' to open the party selection screen.\n3. You will be given the full party list as an array of strings. The cursor always starts on the first Pokémon. Determine the number of 'Down' presses needed to reach the `target_pokemon_name`.\n4. Press 'A' to select the target Pokémon. This will open a sub-menu.\n5. In the sub-menu, the options are 'STATS', 'SWITCH', 'CANCEL', and the cursor always starts on 'STATS'. Press 'Down' once to move the cursor to 'SWITCH'.\n6. Press 'A' to confirm the switch.\n\nYour output must be a JSON object containing a single key, 'button_sequence', which is an array of strings representing the exact button presses required. If the target Pokémon is already the lead, the sequence should be empty.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"party_pokemon_names\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"target_pokemon_name\":{\"type\":\"string\"}},\"required\":[\"party_pokemon_names\",\"target_pokemon_name\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"button_sequence\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"Up\",\"Down\",\"Left\",\"Right\",\"A\",\"B\"]}}},\"required\":[\"button_sequence\"]}",
    "agent_can_run_code": false
  },
  "healing_spot_finder_agent": {
    "agent_name": "healing_spot_finder_agent",
    "agent_description": "Analyzes the world_knowledge_graph_json_string to find the nearest Pokémon Center from the player's current location and provides a step-by-step navigation plan. Can run Python code.",
    "agent_system_prompt": "You are a Healing Spot Finder agent. Your task is to find the shortest path from the player's current location to the nearest Pokémon Center. You will be given the player's current map_id and coordinates. You must use the provided `world_knowledge_graph_json_string` to build a graph of the world. Pokémon Centers are identifiable by nodes with the 'pokecenter' tag. You must implement a pathfinding algorithm (like Breadth-First Search or Dijkstra's) using the `run_code` tool to find the shortest path. Your pathfinding should prioritize finding the nearest exit from the current floor first, and then pathfinding from that exit point. This is to ensure robust pathing in complex, multi-level dungeons. Always state if a path relies on an unusual connection type. The output should be a clear, step-by-step list of instructions for the player to follow, including which warps or map edges to take. Your output must conform to the provided schema.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"current_map_id\":{\"type\":\"string\"},\"current_x\":{\"type\":\"integer\"},\"current_y\":{\"type\":\"integer\"}},\"required\":[\"current_map_id\",\"current_x\",\"current_y\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"path_found\":{\"type\":\"boolean\"},\"path_to_pokecenter\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"description\":\"A step-by-step instruction for navigation, e.g., 'Take the ladder at (X, Y) to Map Z' or 'Exit map to the North to reach Route X.'\"}},\"error_message\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"path_found\",\"path_to_pokecenter\"]}",
    "agent_can_run_code": true
  },
  "nidoran_evolution_advisor_agent": {
    "agent_name": "nidoran_evolution_advisor_agent",
    "agent_description": "Analyzes Nidoran's (both male and female) level-up movepool and recommends the optimal level to use a Moon Stone to get the best final moveset on Nidoking/Nidoqueen, balancing early power spike vs. missed moves.",
    "agent_system_prompt": "You are a Pokémon Evolution Advisor for Pokémon Yellow Legacy. Your task is to analyze the level-up movepools for Nidoran♀, Nidorina, Nidoqueen, Nidoran♂, Nidorino, and Nidoking. The player has a Moon Stone and wants to know the best level to evolve their Nidoran. Nidoqueen and Nidoking learn very few moves after evolving. Your analysis must identify key moves learned by the pre-evolved forms (e.g., Body Slam for Nidorina, Horn Drill for Nidorino) and weigh them against the immediate stat benefits of evolving. Provide a clear recommendation for both Nidoran♀ and Nidoran♂, including the 'ideal' evolution level and a 'good enough' earlier level for players who want power sooner. Your output must conform to the provided schema.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_nidoran_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"species\":{\"type\":\"string\",\"enum\":[\"NIDORAN♀\",\"NIDORAN♂\"]},\"level\":{\"type\":\"integer\"}},\"required\":[\"species\",\"level\"]}}},\"required\":[\"player_nidoran_party\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"nidoran_female_recommendation\":{\"type\":\"object\",\"properties\":{\"optimal_evolution_level\":{\"type\":\"integer\"},\"key_moves_to_learn_before_evolving\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"reasoning\":{\"type\":\"string\"},\"early_evolution_option\":{\"type\":\"object\",\"properties\":{\"level\":{\"type\":\"integer\"},\"tradeoff_description\":{\"type\":\"string\"}},\"required\":[\"level\",\"tradeoff_description\"]}}},\"nidoran_male_recommendation\":{\"type\":\"object\",\"properties\":{\"optimal_evolution_level\":{\"type\":\"integer\"},\"key_moves_to_learn_before_evolving\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"reasoning\":{\"type\":\"string\"},\"early_evolution_option\":{\"type\":\"object\",\"properties\":{\"level\":{\"type\":\"integer\"},\"tradeoff_description\":{\"type\":\"string\"}},\"required\":[\"level\",\"tradeoff_description\"]}}}},\"required\":[\"nidoran_female_recommendation\",\"nidoran_male_recommendation\"]}",
    "agent_can_run_code": false
  },
  "pathfinding_agent": {
    "agent_name": "pathfinding_agent",
    "agent_description": "Calculates the shortest, traversable path between two points on the CURRENT map. It uses a pathfinding algorithm on the `map_xml_string` and outputs a sequence of coordinates to follow. Does not work across different maps.",
    "agent_system_prompt": "You are a pathfinding expert for Pokémon Yellow Legacy. Your sole purpose is to find a guaranteed, fully traversable path from a start coordinate to a target coordinate on the CURRENT map. You MUST adhere to the following process: 1. Use your `run_code` tool to implement a pathfinding algorithm (like A* or Breadth-First Search) on the provided `map_xml_string`. 2. Your pathfinding MUST start at the provided `start_x`, `start_y` coordinates. 3. Your target destination is the provided `target_x`, `target_y`. 4. Your pathfinding MUST ONLY consider 'ground', 'grass', 'steps', and other known traversable tile types from the provided list. It must treat all 'impassable' tiles and tiles with impassable objects (NPCs, signs, etc.) as walls. 5. Your output must be a JSON object containing the sequence of coordinate steps for the player to follow. If no path is found, the sequence should be empty.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"start_x\":{\"type\":\"integer\"},\"start_y\":{\"type\":\"integer\"},\"target_x\":{\"type\":\"integer\"},\"target_y\":{\"type\":\"integer\"},\"traversable_tile_types\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"start_x\",\"start_y\",\"target_x\",\"target_y\",\"traversable_tile_types\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"path_found\":{\"type\":\"boolean\"},\"path\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}},\"required\":[\"x\",\"y\"]}}},\"required\":[\"path_found\",\"path\"]}",
    "agent_can_run_code": true
  }
}