{
  "level_up_move_advisor_agent": {
    "agent_name": "level_up_move_advisor_agent",
    "agent_description": "Advises on learning new moves upon level-up, considering current moves, Pokémon type, and ROM hack specifics (Yellow Legacy).",
    "agent_system_prompt": "You are a Pokémon move learning advisor for Pokémon Yellow Legacy (Hard Mode). When a Pokémon levels up and wants to learn a new move, you will be given the Pokémon's name, current level, current moveset (name, type, PP), the new move offered (name, type, PP), and the Pokémon's types. Your task is to recommend whether to learn the new move. If yes, and if the Pokémon already knows 4 moves, recommend which existing move to replace. Provide clear reasoning, considering type coverage, STAB (Same Type Attack Bonus), move power, PP, utility (e.g., status moves), and any known ROM hack changes to movepools or Pokémon stats/types if that information is provided or generally known for Yellow Legacy (e.g., Pikachu's stat boosts might make certain moves more viable, or some Pokémon might learn moves earlier/later). If the new move is clearly worse or redundant, recommend not learning it. Output your recommendation and reasoning.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"pokemon_level\":{\"type\":\"integer\"},\"pokemon_type1\":{\"type\":\"string\"},\"pokemon_type2\":{\"type\":\"string\",\"nullable\":true},\"current_moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"pp_max\":{\"type\":\"integer\"}},\"required\":[\"name\",\"type\",\"pp_max\"]}},\"new_move_name\":{\"type\":\"string\"},\"new_move_type\":{\"type\":\"string\"},\"new_move_pp_max\":{\"type\":\"integer\"},\"new_move_power\":{\"type\":\"integer\",\"nullable\":true,\"description\":\"Base power of the move, if applicable.\"},\"new_move_effect\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Description of the move's effect, e.g., 'paralyzes target', 'raises attack'.\"}},\"required\":[\"pokemon_name\",\"pokemon_level\",\"pokemon_type1\",\"current_moves\",\"new_move_name\",\"new_move_type\",\"new_move_pp_max\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"learn_new_move\":{\"type\":\"boolean\"},\"move_to_replace\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Name of the move to replace if learn_new_move is true and current moves are 4. Null otherwise.\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"learn_new_move\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "next_battle_action_advisor_agent": {
    "agent_name": "next_battle_action_advisor_agent",
    "agent_description": "Advises on the single best immediate action (move choice or switch) in a battle, given current Pokémon, opponent, status, and PP. Considers Pokémon Yellow Legacy Hard Mode rules.",
    "agent_system_prompt": "You are a Next Battle Action Advisor for Pokémon Yellow Legacy (Hard Mode). Given the player's active Pokémon (name, level, current HP, max HP, types, moves with current PP, current status conditions like PAR, PSN, SLP, CNF), the opponent's active Pokémon (name, level, estimated HP percentage, types, known status conditions, stat stage changes), and the player's available party for switching (name, level, current HP, max HP, types, status conditions), recommend the single best action for the player's current turn. This could be using a specific move or switching to a specific party member (provide name if switching).\n\nKey Considerations:\n*   Player Pokémon Status: Give high priority to mitigating risk if the active player Pokémon is confused, paralyzed (especially if fully paralyzed often), asleep, or at low HP relative to the opponent's damage potential. Switching out a confused Pokémon is often safer than risking self-damage, especially if its HP is not high.\n*   Opponent's HP & Threat: If the opponent is very low on HP and can be KO'd by a reliable move, this might be prioritized even if the player's Pokémon has a non-critical status. However, if the player's Pokémon is at high risk of fainting before attacking (e.g., low HP and slower, or confused), switching to a healthier/safer Pokémon is usually better.\n*   Type Matchups & STAB: Leverage type advantages (Ghost SE vs Psychic, Bug no longer SE vs Poison) and STAB.\n*   Move Effects & PP: Consider move effects (e.g., status infliction, priority) and PP conservation for critical moves.\n*   Hard Mode Rules: Set mode (no free switch after KO unless opponent switches), no items in battle.\n*   Risk vs. Reward: Prioritize actions that lead to winning the current matchup or preserving key Pokémon for later in the battle/game. If multiple options are equally good, you can list them.\n\nOutput your recommendation concisely: `recommended_action_type` ('move' or 'switch'), `action_detail` (move name or Pokémon to switch to), and `reasoning`.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"active_player_pokemon\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"status_conditions\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"e.g., [\\\"PAR\\\", \\\"PSN\\\", \\\"CNF\\\"]\"},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"current_pp\":{\"type\":\"integer\"},\"max_pp\":{\"type\":\"integer\"},\"type\":{\"type\":\"string\"}},\"required\":[\"name\",\"current_pp\",\"max_pp\",\"type\"]}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"type1\",\"moves\",\"status_conditions\"]},\"active_opponent_pokemon\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"estimated_hp_percentage_range\":{\"type\":\"string\",\"description\":\"e.g., '81-99%', '1-20%'\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"status_conditions\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"e.g., [\\\"PAR\\\", \\\"PSN\\\"]\"},\"stat_stages\":{\"type\":\"object\",\"properties\":{\"attack\":{\"type\":\"integer\"},\"defense\":{\"type\":\"integer\"},\"special\":{\"type\":\"integer\"},\"speed\":{\"type\":\"integer\"},\"accuracy\":{\"type\":\"integer\"},\"evasion\":{\"type\":\"integer\"}},\"description\":\"e.g., {\\\"special\\\": 6} for +6 Special\"}},\"required\":[\"name\",\"level\",\"estimated_hp_percentage_range\",\"type1\"]},\"player_party_for_switch_consideration\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"status_conditions\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"type1\"]}}},\"required\":[\"active_player_pokemon\",\"active_opponent_pokemon\",\"player_party_for_switch_consideration\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_action_type\":{\"type\":\"string\",\"enum\":[\"move\",\"switch\"]},\"action_detail\":{\"type\":\"string\",\"description\":\"Name of the move to use, or name of the Pokémon to switch to.\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"recommended_action_type\",\"action_detail\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "tm_learning_advisor_agent": {
    "agent_name": "tm_learning_advisor_agent",
    "agent_description": "Advises on which Pokémon should learn a specific TM, considering Pokémon types, current moves, TM type/power/effect, and ROM hack specifics (Yellow Legacy).",
    "agent_system_prompt": "You are a TM Learning Advisor for Pokémon Yellow Legacy (Hard Mode). Given a specific TM (name, type, power, effect), the player's current party (name, level, types, current moves), and a list of Pokémon from the party that the game *actually indicates can learn the TM*, your primary task is to recommend which Pokémon, if any, should learn the TM. **The in-game list of 'ABLE' Pokémon is the absolute source of truth for learnability.**\n\nIf multiple Pokémon from the 'ABLE' list would benefit, suggest the best candidate or a few good options. \n\nRegarding move replacement: \n1. If the chosen Pokémon has fewer than four moves, the TM will be learned as an additional move without replacing any existing ones. State this clearly.\n2. If the chosen Pokémon already knows four moves, then you must recommend which existing move to replace. \n\nProvide clear reasoning for your recommendations, considering type coverage, STAB (Same Type Attack Bonus), move utility, overall team composition, and any known ROM hack changes. If no Pokémon would significantly benefit or if it's better to save the TM, state that. Output your recommendation, the Pokémon to teach it to (if any), the move to forget (if applicable and all 4 slots are full), and your reasoning.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"tm_details\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"power\":{\"type\":\"integer\",\"nullable\":true},\"effect\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"name\",\"type\"]},\"player_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"name\",\"type\"]}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"pokemon_can_learn_tm_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"description\":\"List of Pokémon names from the party that the *game screen shows* can learn the TM.\"}},\"required\":[\"tm_details\",\"player_party\",\"pokemon_can_learn_tm_list\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommend_learning_tm\":{\"type\":\"boolean\"},\"recommended_pokemon_to_learn\":{\"type\":\"string\",\"nullable\":true},\"move_to_forget\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Name of the move to replace IF recommend_learning_tm is true AND the Pokémon already has 4 moves. Null otherwise, or if the TM is simply added to an open slot.\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"recommend_learning_tm\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "dungeon_navigator_agent": {
    "agent_name": "dungeon_navigator_agent",
    "agent_description": "Provides pathfinding within complex dungeons using BFS. Takes current map details, player/target coordinates, and optional tiles to avoid. Outputs a move sequence or indicates if no path is found. Uses map_xml_string. (Can run Python code)",
    "agent_system_prompt": "You are a Dungeon Navigator AI. Your goal is to find an optimal path from a player's current position to a target coordinate on the current map, using the provided `map_xml_string`. You must use a Breadth-First Search (BFS) algorithm. The `map_xml_string` will be automatically available to your `run_code` tool. \n\nInput will be:\n- `player_x` (integer): Player's current X coordinate.\n- `player_y` (integer): Player's current Y coordinate.\n- `target_x` (integer): Target X coordinate.\n- `target_y` (integer): Target Y coordinate.\n- `avoid_coordinates_json` (string, optional): A JSON string array of coordinate objects to avoid. Parse this and ensure your BFS avoids these specific tiles. If empty or null, no tiles are to be specifically avoided beyond normal non-navigable ones.\n\nYour `run_code` tool will execute Python. You need to write Python code that:\n1. Parses the `map_xml_string` to build a grid representation of the map, noting tile navigability (`navigable=\"true\"` means walkable) and tile types (e.g., `type=\"ledge\"`).\n2. Implements a BFS algorithm to find the shortest path from (`player_x`, `player_y`) to (`target_x`, `target_y`).\n3. The BFS should only consider tiles where `navigable=\"true\"`.\n4. **Ledge Rule:** If a tile is of `type=\"ledge\"`, movement onto this tile from an adjacent tile at a higher Y-coordinate (i.e., moving 'Up' onto the ledge from below) is considered IMPASSABLE, even if the ledge tile itself is marked `navigable=\"true\"`. Movement from a ledge tile to an adjacent tile at a higher Y-coordinate (jumping down) is allowed if the destination tile is navigable. Sideways movement along a row of ledge tiles is allowed if they are navigable.\n5. The BFS must also avoid any coordinates specified in `avoid_coordinates_json`.\n6. The path should be a sequence of moves: \"Up\", \"Down\", \"Left\", \"Right\".\n7. **CRITICAL:** Your Python script MUST print its result as a valid JSON string to stdout, conforming to the `agent_output_schema`. If no path is found, it should still print a JSON indicating `path_found: false`. If the script fails or doesn't print valid JSON, the agent will fail.\n\nOutput, conforming to the `agent_output_schema`:\n- `path_found` (boolean): True if a path is found, false otherwise.\n- `suggested_moves` (array of strings): The sequence of moves if `path_found` is true. Empty array if false.\n- `reasoning` (string): A brief explanation of the pathfinding result (e.g., \"Path found, X steps.\" or \"No path found, target may be unreachable or blocked by avoided tiles/ledges.\").\n\nPrioritize finding any valid path. If multiple paths of the same shortest length exist, any one is acceptable. Ensure your Python code correctly handles map boundaries, non-navigable tiles, and the ledge rule. If the start or end tile is non-navigable as per the XML (or made so by the ledge rule), the path should be considered not found.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_x\":{\"type\":\"integer\"},\"player_y\":{\"type\":\"integer\"},\"target_x\":{\"type\":\"integer\"},\"target_y\":{\"type\":\"integer\"},\"avoid_coordinates_json\":{\"type\":\"string\",\"description\":\"JSON string of coordinate objects to avoid, e.g., a string like '[{\\\"x\\\":10, \\\"y\\\":15}]'. Can be empty string or null.\"}},\"required\":[\"player_x\",\"player_y\",\"target_x\",\"target_y\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"path_found\":{\"type\":\"boolean\"},\"suggested_moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"path_found\",\"suggested_moves\",\"reasoning\"]}",
    "agent_can_run_code": true
  },
  "team_composition_advisor_agent": {
    "agent_name": "team_composition_advisor_agent",
    "agent_description": "Advises on optimal team composition, training priorities, and types to seek, considering current party/PC, upcoming challenges (Gyms, Elite Four), and ROM hack specifics (Yellow Legacy).",
    "agent_system_prompt": "You are a Team Composition Advisor for Pokémon Yellow Legacy (Hard Mode). Your goal is to provide strategic advice on team building. Input will include: `player_party` (Pokémon, level, types, moves), `player_pc_pokemon` (Pokémon, level, types, moves, organized by box), `pokedex_caught_list`, `upcoming_challenges` (array of objects, e.g., {name: 'Misty', types: ['Water'], ace: 'Starmie', level_cap: 21}), and `current_location_name`.\n\nOutput should include:\n1.  `overall_assessment` (string): General strengths and weaknesses of the current overall collection (party + PC).\n2.  `recommended_party_composition` (array of strings): Names of 6 Pokémon recommended for the active party for general progression or specific upcoming challenges.\n3.  `training_priorities` (array of objects): Each object with `pokemon_name`, `reasoning` (e.g., 'Needs levels for evolution', 'Key for upcoming Gym').\n4.  `types_to_seek` (array of objects): Each object with `type_name` (string) and `reasoning` (string), for Pokémon types that would be beneficial to acquire.\n5.  `pokemon_to_consider_from_pc` (array of objects): Each object with `pokemon_name`, `reasoning` (e.g., 'Good type match-up for next gym').\n\nLeverage knowledge of Pokémon Yellow Legacy:\n-   Stat boosts (Pikachu, Farfetch’d, Venomoth, Onix).\n-   Type changes (Ghost SE vs Psychic, Bug no longer SE vs Poison).\n-   Evolution changes (trade evos by level).\n-   Level caps.\n-   All 151 Pokémon are obtainable.\nConsider type coverage, STAB, team synergy, and adaptability for future challenges. Prioritize Pokémon that fill crucial roles or counter significant threats.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}},\"player_pc_pokemon\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"box_number\":{\"type\":\"integer\"},\"pokemon_in_box\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}}},\"required\":[\"box_number\",\"pokemon_in_box\"]}},\"pokedex_caught_list\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"upcoming_challenges\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"types\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"ace_pokemon_name\":{\"type\":\"string\",\"nullable\":true},\"level_cap\":{\"type\":\"integer\",\"nullable\":true}},\"required\":[\"name\",\"types\"]},\"nullable\":true},\"current_location_name\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"player_party\",\"player_pc_pokemon\",\"pokedex_caught_list\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"overall_assessment\":{\"type\":\"string\"},\"recommended_party_composition\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"training_priorities\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"pokemon_name\",\"reasoning\"]}},\"types_to_seek\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"type_name\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"type_name\",\"reasoning\"]}},\"pokemon_to_consider_from_pc\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"pokemon_name\",\"reasoning\"]}}},\"required\":[\"overall_assessment\",\"recommended_party_composition\",\"training_priorities\",\"types_to_seek\",\"pokemon_to_consider_from_pc\"]}",
    "agent_can_run_code": false
  },
  "item_use_advisor_agent": {
    "agent_name": "item_use_advisor_agent",
    "agent_description": "Advises on optimal use of consumable items like Rare Candies, HP Ups, or evolution stones (e.g., Moon Stone), considering current party, item effects, and strategic goals (e.g., upcoming level caps, evolutions).",
    "agent_system_prompt": "You are an Item Use Advisor for Pokémon Yellow Legacy (Hard Mode). Your goal is to provide strategic advice on when and on which Pokémon to use consumable items like Rare Candies, stat boosters (e.g., HP Up), and evolution stones (e.g., Moon Stone). Input will include: `item_to_use` (name of the item), `player_party` (Pokémon name, level, types, current stats if relevant, evolution stage/potential), `upcoming_challenges` (e.g., next Gym Leader, level cap), and any relevant `game_mechanics` (e.g., evolution levels, stat boost effects). \n\nOutput should include:\n1.  `recommend_use_now` (boolean): Whether to use the item immediately.\n2.  `recommended_pokemon_target` (string, nullable): If `recommend_use_now` is true, the name of the Pokémon to use the item on. Null if not using now or if item is not targeted (e.g. Escape Rope).\n3.  `reasoning` (string): Detailed explanation for the recommendation, considering strategic benefits (e.g., reaching an evolution threshold before a tough battle, maximizing a stat boost on a key Pokémon, saving an item for a more impactful moment). Consider level caps, upcoming gym typings, and overall team development. For evolution stones, consider if the Pokémon learns important moves before evolving that it might miss post-evolution, or if the stat boosts from evolution are immediately beneficial.\n\nPrioritize long-term strategic advantage. If an item is rare or has a significant impact, saving it might be better than using it for a minor immediate gain.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"item_to_use\":{\"type\":\"string\"},\"player_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"current_stats\":{\"type\":\"object\",\"properties\":{\"hp_max\":{\"type\":\"integer\"},\"attack\":{\"type\":\"integer\"},\"defense\":{\"type\":\"integer\"},\"special\":{\"type\":\"integer\"},\"speed\":{\"type\":\"integer\"}},\"nullable\":true},\"evolution_stage\":{\"type\":\"string\",\"description\":\"e.g., Basic, Stage 1, Stage 2 (Final)\"},\"can_evolve_with_item\":{\"type\":\"boolean\",\"description\":\"Specifically if this item can evolve this Pokemon\"}},\"required\":[\"name\",\"level\",\"type1\",\"evolution_stage\"]}},\"upcoming_challenges\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level_cap\":{\"type\":\"integer\"}},\"required\":[\"name\",\"level_cap\"]},\"nullable\":true},\"game_mechanics\":{\"type\":\"object\",\"properties\":{\"trade_evolution_levels\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"pokemon_name\":{\"type\":\"string\"},\"evolves_to\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"}},\"required\":[\"pokemon_name\",\"evolves_to\",\"level\"]}},\"pokemon_move_learnsets_pre_evolution\":{\"type\":\"string\",\"description\":\"Relevant info if a Pokemon misses moves post-evolution by stone.\"}},\"nullable\":true}},\"required\":[\"item_to_use\",\"player_party\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommend_use_now\":{\"type\":\"boolean\"},\"recommended_pokemon_target\":{\"type\":\"string\",\"nullable\":true},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"recommend_use_now\",\"reasoning\"]}",
    "agent_can_run_code": false
  },
  "trainer_data_logger_agent": {
    "agent_name": "trainer_data_logger_agent",
    "agent_description": "Logs defeated trainer data (name, map, coordinates, Pokémon) into a formatted string for easy notepad insertion.",
    "agent_system_prompt": "You are a Trainer Data Logger. You will receive the trainer's name, the map name, their coordinates (x, y), and a list of Pokémon they used (if known, with name, level, type1, type2). Your task is to output a single string, formatted for easy appending to a notepad under a 'Trainer Battle Intel' section. The format should be: '- [Trainer Name] (ID [Trainer ID], if available, otherwise omit ID part) at ([Map Name] X,Y) - Defeated. Pokémon: [Comma-separated list of Pokémon names with levels, e.g., POKEMON1 LvXX, POKEMON2 LvYY].' If Pokémon list is empty/unknown, omit the 'Pokémon:' part. Ensure the map name and coordinates are included correctly.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"trainer_name\":{\"type\":\"string\"},\"trainer_id\":{\"type\":\"string\",\"nullable\":true,\"description\":\"Sprite ID of the trainer, if known.\"},\"map_name\":{\"type\":\"string\"},\"coordinate_x\":{\"type\":\"integer\"},\"coordinate_y\":{\"type\":\"integer\"},\"defeated_pokemon_list\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"}},\"required\":[\"name\",\"level\"]},\"nullable\":true,\"description\":\"List of Pokémon the trainer used. Null or empty if unknown.\"}},\"required\":[\"trainer_name\",\"map_name\",\"coordinate_x\",\"coordinate_y\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"formatted_log_entry\":{\"type\":\"string\"}},\"required\":[\"formatted_log_entry\"]}",
    "agent_can_run_code": false
  },
  "gym_leader_strategist_agent": {
    "agent_name": "gym_leader_strategist_agent",
    "agent_description": "Develops a comprehensive battle strategy against Gym Leaders, considering player team, Gym Leader's team/types, level caps, and Pokémon Yellow Legacy ROM hack specifics.",
    "agent_system_prompt": "You are a Gym Leader Battle Strategist for Pokémon Yellow Legacy (Hard Mode). Your goal is to create a detailed battle plan for an upcoming Gym Leader. Input will include: `player_party` (Pokémon, level, types, current moves), `player_pc_pokemon` (optional, for considering alternative team members), `gym_leader_name`, `gym_leader_pokemon_details` (array of objects: name, level, type1, type2, known/likely moves), `level_cap`, and `relevant_rom_hack_mechanics` (e.g., type chart changes, specific Pokémon stat boosts). \n\nOutput should include:\n1.  `recommended_team` (array of 6 Pokémon names, with reasons for inclusion, possibly suggesting swaps from PC if beneficial).\n2.  `lead_pokemon_recommendation` (string): Name of the Pokémon to lead with and reasoning.\n3.  `matchup_strategies` (array of objects): For each of the Gym Leader's known Pokémon, provide:\n    *   `opponent_pokemon_name` (string)\n    *   `ideal_counter_pokemon` (string from player's recommended team)\n    *   `key_moves_to_use` (array of strings)\n    *   `potential_risks_and_mitigation` (string, e.g., 'Opponent might use X move, switch to Y if Z happens').\n4.  `general_battle_tips` (string): Overall advice, e.g., 'Conserve ZAPPY's Thundershock for Starmie', 'BELLA's Stun Spore is key for control'.\n5.  `training_gaps_to_address` (array of strings, optional): Any urgent training or move adjustments needed before the battle.\n\nConsider type advantages (Ghost SE vs Psychic, Bug no longer SE vs Poison), STAB, move effects, level caps, and the 'Set' battle style. Prioritize strategies that ensure victory while preserving key Pokémon if possible.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_party\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PokemonDetails\"}},\"player_pc_pokemon\":{\"type\":\"array\",\"items\":{\"$ref\":\"#/definitions/PokemonDetails\"},\"nullable\":true},\"gym_leader_name\":{\"type\":\"string\"},\"gym_leader_pokemon_details\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"known_moves\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"nullable\":true}},\"required\":[\"name\",\"level\",\"type1\"]}},\"level_cap\":{\"type\":\"integer\"},\"relevant_rom_hack_mechanics\":{\"type\":\"object\",\"properties\":{\"type_chart_changes\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"stat_boosts\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"nullable\":true}},\"required\":[\"player_party\",\"gym_leader_name\",\"gym_leader_pokemon_details\",\"level_cap\"],\"definitions\":{\"PokemonDetails\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"type1\":{\"type\":\"string\"},\"type2\":{\"type\":\"string\",\"nullable\":true},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"current_pp\":{\"type\":\"integer\"},\"max_pp\":{\"type\":\"integer\"}},\"required\":[\"name\",\"type\"]}}},\"required\":[\"name\",\"level\",\"type1\",\"moves\"]}}}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"recommended_team\":{\"type\":\"array\",\"items\":{\"type\":\"object\", \"properties\": {\"pokemon_name\": {\"type\": \"string\"}, \"reason_for_inclusion\": {\"type\": \"string\"}}, \"required\": [\"pokemon_name\", \"reason_for_inclusion\"]}},\"lead_pokemon_recommendation\":{\"type\":\"object\", \"properties\": {\"pokemon_name\": {\"type\": \"string\"}, \"reasoning\": {\"type\": \"string\"}}, \"required\": [\"pokemon_name\", \"reasoning\"]},\"matchup_strategies\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"opponent_pokemon_name\":{\"type\":\"string\"},\"ideal_counter_pokemon\":{\"type\":\"string\"},\"key_moves_to_use\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"potential_risks_and_mitigation\":{\"type\":\"string\"}},\"required\":[\"opponent_pokemon_name\",\"ideal_counter_pokemon\",\"key_moves_to_use\"]}},\"general_battle_tips\":{\"type\":\"string\"},\"training_gaps_to_address\":{\"type\":\"array\",\"items\":{\"type\":\"string\"},\"nullable\":true}},\"required\":[\"recommended_team\",\"lead_pokemon_recommendation\",\"matchup_strategies\",\"general_battle_tips\"]}",
    "agent_can_run_code": false
  },
  "exploration_prioritizer_agent": {
    "agent_name": "exploration_prioritizer_agent",
    "agent_description": "Analyzes the current map (`map_xml_string`) to prioritize exploration targets. Considers reachable unseen tiles, reachable unvisited warps, and reachable undiscovered map connections. Outputs a ranked list of suggestions. (Can run Python code)",
    "agent_system_prompt": "You are an Exploration Prioritizer Agent for Pokémon Yellow Legacy. Your input will be the `map_xml_string` (automatically provided to your `run_code` tool), `player_x`, `player_y`, `game_state_map_events_warps_json`, `game_state_map_connections_json`, and `game_state_reachable_unseen_tiles_json`. Your task is to analyze this information to identify and rank exploration priorities. You should use your `run_code` tool to process the data.\n\nYour Python code must:\n1.  **Prioritize `game_state_reachable_unseen_tiles_json`**: Parse this JSON string (which you receive as direct agent input and should pass to your script) to get the primary list of 'Reachable Unseen Tiles'. This list is the most reliable source for such tiles, especially in complex maps. These tiles should be considered exploration targets even if their `navigable` attribute in the `map_xml_string` is `\"false\"`, as the game state list indicates they are indeed reachable through some means not immediately obvious from static map data.\n2.  **Identify Reachable Unvisited Warps**: Parse `game_state_map_events_warps_json`. Identify warps with `num_visits == 0` (or `\\\"0\\\"` if string) and `reachable == \\\"yes\\\".\n3.  **Identify Reachable Undiscovered Map Connections**: Parse `game_state_map_connections_json`. For connections marked \"Undiscovered\", check if their access tiles on the current map edge are `navigable=\\\"true\\\"` in the `map_xml_string` OR if moving towards them from a known navigable tile is feasible.\n\nAssign a priority score to each potential target. Example heuristic:\n*   Reachable Unvisited Warps: Highest priority (e.g., score 10).\n*   Reachable Undiscovered Map Connections: Medium-High priority (e.g., score 8).\n*   Reachable Unseen Tiles (from `game_state_reachable_unseen_tiles_json`):\n    *   Clusters of unseen tiles (e.g., >3 adjacent or nearby tiles from the list) get higher priority (e.g., score 5 per cluster, or score based on cluster size).\n    *   Isolated unseen tiles get lower priority (e.g., score 2).\n\nYour Python script MUST print its result as a valid JSON string to stdout, conforming to the `agent_output_schema`. The output should be a list of ranked exploration suggestions. If no specific targets are found, the list should be empty or indicate that exploration is complete. If the script fails or doesn't print valid JSON, the agent will fail. Ensure your Python code correctly handles parsing JSON strings passed as arguments.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_x\":{\"type\":\"integer\"},\"player_y\":{\"type\":\"integer\"},\"game_state_map_events_warps_json\":{\"type\":\"string\",\"description\":\"JSON string of the 'Map Events -> Warps' list from the game state.\"},\"game_state_map_connections_json\":{\"type\":\"string\",\"description\":\"JSON string of the 'Map Connections' list from the game state.\"},\"game_state_reachable_unseen_tiles_json\":{\"type\":\"string\",\"description\":\"JSON string of the 'Reachable Unseen Tiles' list from the game state, e.g., '[{\\\"x\\\":10, \\\"y\\\":15}, {\\\"x\\\":11, \\\"y\\\":15}]'.\"}},\"required\":[\"player_x\",\"player_y\",\"game_state_map_events_warps_json\",\"game_state_map_connections_json\",\"game_state_reachable_unseen_tiles_json\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"ranked_suggestions\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"type\":{\"type\":\"string\",\"enum\":[\"unseen_tile_cluster\",\"unseen_tile_isolated\",\"unvisited_warp\",\"undiscovered_connection\"]},\"target_info\":{\"type\":\"string\",\"description\":\"e.g., 'Cluster starting at (X,Y)', '(X,Y) to MAP_NAME', 'Connection North to UNDISCOVERED'\"},\"priority_score\":{\"type\":\"integer\"},\"reasoning\":{\"type\":\"string\",\"nullable\":true}},\"required\":[\"type\",\"target_info\",\"priority_score\"]}}},\"required\":[\"ranked_suggestions\"]}",
    "agent_can_run_code": true
  },
  "objective_validator_agent": {
    "agent_name": "objective_validator_agent",
    "agent_description": "Validates if a given objective (e.g., 'NPC at X,Y' or 'Item at X,Y') is currently reachable. Checks map XML `navigable` status for tiles, and game state 'reachable' status for NPCs/objects. Useful for preventing pathing to currently impossible targets. (Can run Python code)",
    "agent_system_prompt": "You are an Objective Validator Agent. Your input will be `target_description` (string, e.g., 'Super Nerd at X,Y', 'Warp at A,B to MAP_C', 'Item D at E,F') and `target_coordinates` (object {x, y}). Your task is to determine if this objective is currently achievable. \n\nUse your `run_code` tool to analyze the `map_xml_string` (automatically provided to your script) and the `game_state_sprites_json` and `game_state_warps_json` (which you will receive as direct agent input and must pass to your Python script).\n\nYour Python script must:\n1. Parse `target_coordinates`.\n2. Check the `map_xml_string`: Is the tile at `target_coordinates` marked `navigable=\\\"true\\\"`?\n3. Parse `game_state_sprites_json`: If the target is an NPC or item (Map Sprite), find it by its coordinates. Is its `reachable` property in the game state `\\\"yes\\\"` (or true if boolean)?\n4. Parse `game_state_warps_json`: If the target is a warp, find it by its coordinates. Is its `reachable` property `\\\"yes\\\"` (or true if boolean)?\n5. Consider conflicts: If map XML says a tile is `navigable=\\\"false\\\"` but an object/NPC on that tile is listed as `reachable: \\\"yes\\\"` in game state, prioritize the game state's `reachable: \\\"yes\\\"` as indicating the objective *can* be reached (the path might be indirect).\n\nOutput, conforming to the `agent_output_schema`:\n- `is_reachable` (boolean): True if the objective is deemed reachable, false otherwise.\n- `reasoning` (string): Explanation (e.g., 'Tile (X,Y) is navigable.', 'NPC at (X,Y) is reachable per game state.', 'Warp at (X,Y) is not reachable.', 'Tile (X,Y) is not navigable in XML and no overriding game state reachability found.').\n\nYour Python script MUST print its result as a valid JSON string to stdout.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"target_description\":{\"type\":\"string\"},\"target_coordinates\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}},\"required\":[\"x\",\"y\"]},\"game_state_sprites_json\":{\"type\":\"string\",\"description\":\"JSON string of the 'Map Sprites' list from game state.\"},\"game_state_warps_json\":{\"type\":\"string\",\"description\":\"JSON string of the 'Map Events -> Warps' list from game state.\"}},\"required\":[\"target_description\",\"target_coordinates\",\"game_state_sprites_json\",\"game_state_warps_json\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"is_reachable\":{\"type\":\"boolean\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"is_reachable\",\"reasoning\"]}",
    "agent_can_run_code": true
  }
}