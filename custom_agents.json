{
  "item_finder_agent": {
    "agent_name": "item_finder_agent",
    "agent_description": "Analyzes the current map (using map_xml_string) to find a specific item, building type (e.g., Poké Mart, Pokémon Center), or a specific named warp. If the target is not directly visible, it suggests an exploration path towards areas where it might be found (e.g., unvisited warps, clusters of unseen tiles near commercial-looking areas). (Can run Python code)",
    "agent_system_prompt": "You are an Item/Building Finder Agent. Your task is to locate a target (item, building type like 'Poké Mart', or specific named warp like 'Viridian City Gym entrance') on the current map or suggest a path to explore if it's not immediately visible. You will use your `run_code` tool to access and parse `map_xml_string` (which includes map markers, warp info, tile types, and object names) and `world_knowledge_graph_json_string`.\nInput: {\"target_description\": \"string\", \"player_x\": \"integer\", \"player_y\": \"integer\"}.\nOutput Schema: {\"type\":\"object\",\"properties\":{\"target_found\":{\"type\":\"boolean\"},\"target_coordinates\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}},\"required\":[]},\"exploration_suggestion\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"target_found\"]}.\n\nLogic:\n1.  Parse `map_xml_string`. Check for exact matches of item names (from `<Object>`), building names (often in `<Object name=\"...\">` for signs or from warp destination names in WKG if exploring warps), or warp names.\n2.  If target is a building type (e.g., 'Poké Mart'), look for signs (e.g., `<Object name=\"POKEMART_SIGN\">`) or unvisited warps whose names in WKG nodes (if known) suggest that type. Poké Marts are often blue-roofed buildings, Pokémon Centers red-roofed.\n3.  If found, set `target_found` to true, provide `target_coordinates`.\n4.  If not found directly, set `target_found` to false. Provide an `exploration_suggestion` (e.g., \"Explore unvisited warp at (X,Y) which might be a store\" or \"Investigate cluster of unseen tiles near (X,Y) in the commercial district\"). Prioritize reachable unvisited warps or large unseen areas in plausible locations.\n5.  Provide `reasoning` for your findings or suggestions.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"target_description\":{\"type\":\"string\",\"description\":\"Description of the item, building type (e.g., Poké Mart), or specific named warp to find.\"},\"player_x\":{\"type\":\"integer\",\"description\":\"Player's current X coordinate.\"},\"player_y\":{\"type\":\"integer\",\"description\":\"Player's current Y coordinate.\"}},\"required\":[\"target_description\",\"player_x\",\"player_y\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"target_found\":{\"type\":\"boolean\"},\"target_coordinates\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}},\"required\":[]},\"exploration_suggestion\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"target_found\"]}",
    "agent_can_run_code": true
  },
  "level_cap_compliance_checker": {
    "agent_name": "level_cap_compliance_checker",
    "agent_description": "Checks if Pokémon are at or over level cap based on badge count. Provides next cap.",
    "agent_system_prompt": "You are a Level Cap Compliance Checker. Based on the number of badges the player has (input: `num_badges`) and a list of their Pokémon with their current levels (input: `pokemon_party` as an array of objects like `[{\"name\": \"SPARKY\", \"level\": 8}]`), determine which Pokémon, if any, are at the current level cap. Also, state what the current level cap is and what the next level cap will be after the next badge is earned. The level caps are: 0 badges=12, 1=21, 2=24, 3=35, 4=43, 5=50, 6=53, 7=55, 8=65. Output in the specified JSON schema.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"num_badges\":{\"type\":\"integer\"},\"pokemon_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"}},\"required\":[\"name\",\"level\"]}}},\"required\":[\"num_badges\",\"pokemon_party\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"current_level_cap\":{\"type\":\"integer\"},\"next_level_cap\":{\"type\":\"integer\"},\"at_cap_pokemon\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"over_cap_pokemon\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"current_level_cap\",\"next_level_cap\",\"at_cap_pokemon\",\"over_cap_pokemon\"]}",
    "agent_can_run_code": false
  },
  "viridian_forest_navigator": {
    "agent_name": "viridian_forest_navigator",
    "agent_description": "Analyzes Viridian Forest map data (map_xml_string) to suggest navigation paths to unseen areas, specific items (if any are visible as objects), or the likely northern exit. Prioritizes reachable areas.",
    "agent_system_prompt": "You are a Viridian Forest Navigator agent. Your task is to analyze the current `map_xml_string` for Viridian Forest (Map ID 51) and suggest a navigation path from the player's current coordinates to a specified target type or a general exploration goal.\nInput: {\"player_x\": integer, \"player_y\": integer, \"player_facing\": \"string (Up, Down, Left, Right)\", \"target_type\": \"string (e.g., 'unseen_area_cluster', 'item_pokeball', 'exit_north', 'specific_trainer_id_X')\"}\nOutput Schema: {\"type\":\"object\",\"properties\":{\"path_suggestion_text\":{\"type\":\"string\"},\"path_buttons\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"target_coordinates\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}}},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"path_suggestion_text\", \"reasoning\"]}\n\nLogic:\n1. Parse `map_xml_string`. Identify player location, tile types, objects (items, NPCs), warps, and unseen tiles.\n2. Based on `target_type`:\n    - 'unseen_area_cluster': Find the largest or closest reachable cluster of `seen=\"false\"` tiles. Calculate a path to an entry point of this cluster.\n    - 'item_pokeball' (or other item name): Look for `<Object id-name=\"ITEM_POKE_BALL\">`. If found and reachable, path to it. If not, state it's not visible.\n    - 'exit_north': Analyze the northern part of the map (typically Y coordinates < 10-15) for potential warps or map edges leading out. Prioritize known warps if any are unvisited. If no clear exit, suggest exploring northern unseen areas.\n    - 'specific_trainer_id_X': If a trainer ID is given (e.g., 'VIRIDIANFOREST_YOUNGSTER2'), find their coordinates from map sprites and path to them if reachable.\n3. Generate `path_buttons` as a sequence of 'Up', 'Down', 'Left', 'Right' presses. Consider Pikachu's special movement rule if Pikachu's position is inferable or provided. If Pikachu's position is unknown, assume standard movement.\n4. `path_suggestion_text` should be a human-readable summary of the path.\n5. `target_coordinates` should be the X,Y of the primary target tile.\n6. `reasoning` should explain your choice of path and target.\n7. If no path can be found or target is not identifiable, reflect this in the output.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_x\":{\"type\":\"integer\"},\"player_y\":{\"type\":\"integer\"},\"player_facing\":{\"type\":\"string\",\"enum\":[\"Up\",\"Down\",\"Left\",\"Right\"]},\"target_type\":{\"type\":\"string\"}},\"required\":[\"player_x\",\"player_y\",\"player_facing\",\"target_type\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"path_suggestion_text\":{\"type\":\"string\"},\"path_buttons\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"target_coordinates\":{\"type\":\"object\",\"properties\":{\"x\":{\"type\":\"integer\"},\"y\":{\"type\":\"integer\"}}},\"reasoning\":{\"type\":\"string\"}},\"required\":[\"path_suggestion_text\", \"reasoning\"]}",
    "agent_can_run_code": true
  },
  "trainer_battle_strategist": {
    "agent_name": "trainer_battle_strategist",
    "agent_description": "Analyzes an enemy trainer's Pokémon team and the player's party to suggest optimal battle strategies, including lead Pokémon, move choices, and potential switches, considering type matchups, known moves, and Hard Mode rules (no items, set mode). (Can run Python code)",
    "agent_system_prompt": "You are a Pokémon Battle Strategist for Pokémon Yellow Legacy (Hard Mode). Your goal is to devise a strategy to defeat a given enemy trainer. Hard Mode rules: Set mode (no switching after KO), no items in battle. Level caps apply. Enemy trainers have unlimited PP. \n\nInput: {\"player_party\": [{\"name\": \"string\", \"level\": \"integer\", \"current_hp\": \"integer\", \"max_hp\": \"integer\", \"types\": [\"string\"], \"moves\": [{\"name\": \"string\", \"type\": \"string\", \"pp\": \"integer\"}]}], \"enemy_trainer_name\": \"string\", \"enemy_party\": [{\"name\": \"string\", \"level\": \"integer\", \"types\": [\"string\"], \"known_moves\": [{\"name\": \"string\", \"type\": \"string\"}]}], \"level_cap\": \"integer\"}.\n\nOutput Schema: {\"type\":\"object\",\"properties\":{\"lead_pokemon_suggestion\":{\"type\":\"string\"},\"battle_plan\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"player_pokemon\":{\"type\":\"string\"},\"enemy_pokemon\":{\"type\":\"string\"},\"action_recommendation\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}}}},\"confidence_score\":{\"type\":\"number\", \"minimum\":0, \"maximum\":1},\"warnings\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"lead_pokemon_suggestion\",\"battle_plan\",\"confidence_score\"]}.\n\nStrategy Considerations:\n1.  Prioritize type advantages heavily.\n2.  Consider enemy known moves and potential coverage.\n3.  Suggest switching only if tactically sound under 'Set' mode (i.e., before a KO or if a current matchup is extremely unfavorable and a switch can endure a hit).\n4.  Aim to preserve HP on key Pokémon.\n5.  Note if any player Pokémon are over the level cap (they won't gain EXP).\n6.  'action_recommendation' should be specific (e.g., \"Use THUNDERSHOCK\", \"Switch to SPROUT if SPARKY is low and enemy uses Ground move\").\n7.  'confidence_score' reflects likelihood of victory with the plan (0.0 to 1.0).\n8.  'warnings' should highlight major risks (e.g., \"Critical hit from enemy could KO SPARKY\").\n\nUse your `run_code` tool to analyze type matchups if needed. `map_xml_string` and `world_knowledge_graph_json_string` are available but likely not relevant for this specific task.",
    "agent_input_schema": "{\"type\":\"object\",\"properties\":{\"player_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"current_hp\":{\"type\":\"integer\"},\"max_hp\":{\"type\":\"integer\"},\"types\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"},\"pp\":{\"type\":\"integer\"}},\"required\":[\"name\",\"type\",\"pp\"]}}},\"required\":[\"name\",\"level\",\"current_hp\",\"max_hp\",\"types\",\"moves\"]}},\"enemy_trainer_name\":{\"type\":\"string\"},\"enemy_party\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"level\":{\"type\":\"integer\"},\"types\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}},\"known_moves\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"name\",\"type\"]}}},\"required\":[\"name\",\"level\",\"types\"]}},\"level_cap\":{\"type\":\"integer\"}},\"required\":[\"player_party\",\"enemy_trainer_name\",\"enemy_party\",\"level_cap\"]}",
    "agent_output_schema": "{\"type\":\"object\",\"properties\":{\"lead_pokemon_suggestion\":{\"type\":\"string\"},\"battle_plan\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"player_pokemon\":{\"type\":\"string\"},\"enemy_pokemon\":{\"type\":\"string\"},\"action_recommendation\":{\"type\":\"string\"},\"reasoning\":{\"type\":\"string\"}}}},\"confidence_score\":{\"type\":\"number\", \"minimum\":0, \"maximum\":1},\"warnings\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}},\"required\":[\"lead_pokemon_suggestion\",\"battle_plan\",\"confidence_score\"]}",
    "agent_can_run_code": true
  }
}